import './index.scss';

import { defineComponent, ref } from 'vue';
import {
  VStackBtn,
  VDialog,
  VSnackbar,
  VMenu,
  useVueStack,
} from '@fastkit/vue-stack';
import { VExpandTransition } from '@fastkit/vue-utils';
import { mediaQueryService } from '@/<%~ it.package.dirName %>/plugins/media-query';
import { colorScheme } from '@/<%~ it.package.dirName %>/.dynamic/color-scheme/color-scheme.info';
<% if (it.packages.shared) { %>
import { SHARED_VALUE as SOME_VALUE } from '@/<%~ it.packages.shared.dirName %>';
<%- } else { %>
const SOME_VALUE = 'abcde';
<%- } %>
import { SomeService } from '@/web/services/some-service';

const HomeView = defineComponent({
  name: 'HomeView',
  setup() {
    const vueStack = useVueStack();
    const someService = new SomeService();
    return {
      vueStack,
      colorScheme,
      disabled: ref(false),
      count: ref(0),
      stackActive: ref(false),
      persistent: ref(false),
      expanded: ref(false),
      someService,
    };
  },
  render() {
    const { scopeNames } = this.colorScheme;
    return (
      <div style={{ padding: '20px' }}>
        <h1>Here is Home</h1>
        <pre>
          <code>Service Value: {this.someService.count}</code>
        </pre>
        <button
          type="button"
          onClick={() => {
            this.someService.inc();
          }}>
          increment
        </button>

        <pre>
          <code>
            mediaQueryService:{' '}
            {mediaQueryService.matches('wide')
              ? 'wide'
              : mediaQueryService.matches('narrow')
              ? 'narrow'
              : 'N/A'}
          </code>
        </pre>

        <pre>
          <code>SHARED_VALUE: {SOME_VALUE}</code>
        </pre>

        <hr />

        <VStackBtn
          onClick={() => {
            this.vueStack.alert({
              content: (ctrl) => {
                return 'message';
              },
            });
          }}>
          Dialog!
        </VStackBtn>

        <VSnackbar
          top
          v-slots={{
            activator: ({ attrs }) => {
              return [<VStackBtn {...attrs}>Snackbar!</VStackBtn>];
            },
          }}>
          Snackbar!
        </VSnackbar>

        <hr />

        <VMenu
          v-slots={{
            activator: ({ attrs }) => {
              return [<VStackBtn {...attrs}>MENU!</VStackBtn>];
            },
          }}>
          This is menu...
          <VStackBtn
            onClick={(e) => {
              this.expanded = !this.expanded;
            }}>
            EXPAND...
          </VStackBtn>
          <VExpandTransition
            onAfterEnter={(e) => {
              console.log('onAfterEnter', e);
            }}>
            <div v-show={this.expanded} style={{ transition: 'all 0.35s' }}>
              <p>
                Hello world!!! Hello world!!! Hello world!!! Hello world!!!
                Hello world!!! Hello world!!! Hello world!!! Hello world!!!
              </p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
              <p>Hello world!!!</p>
            </div>
          </VExpandTransition>
        </VMenu>

        <hr />

        <VStackBtn
          onClick={(e) => {
            this.count++;
          }}>
          Click!! {this.count}
        </VStackBtn>

        <hr />

        <div>
          <label>
            <input type="checkbox" v-model={this.persistent} />
            persistent
          </label>
        </div>
        <div>
          <label>
            <input type="checkbox" v-model={this.stackActive} />
            v-model: {this.stackActive ? 'ON' : 'OFF'}
          </label>
        </div>
        <VDialog
          backdrop
          persistent={this.persistent}
          class={`my-stack--${this.count}`}
          v-model={this.stackActive}
          actions={[
            {
              key: 'cancel',
              content: 'cancel !?',
              color: 'primary',
              variant: 'outlined',
              spacer: true,
              onClick: (control) => {
                control.close({ force: true });
              },
            },
            {
              key: 'ok',
              content: 'OK',
              color: 'primary',
              // spacer: true,
              onClick: (control) => {
                control.close({ force: true });
              },
            },
          ]}
          v-slots={{
            activator: ({ attrs, control }) => {
              return [
                <VStackBtn {...attrs} color="primary">
                  Activator {control.isActive ? 'ON' : 'OFF'}
                </VStackBtn>,
              ];
            },
          }}>
          Oh What ...
        </VDialog>

        <hr />

        <div class="primary-scope contained">primary-scope contained</div>
        <div class="error-scope outlined">error-scope outlined</div>

        <hr />

        <label>
          <input type="checkbox" v-model={this.disabled} />
          Disabled
        </label>

        {colorScheme.variants.map((variant) => (
          <div key={variant}>
            <h3>{variant}</h3>
            {scopeNames.map((scopeName) => {
              return (
                <VStackBtn
                  color={scopeName}
                  key={scopeName}
                  disabled={this.disabled}
                  variant={variant}>
                  BUTTON ({scopeName || '*default'})
                </VStackBtn>
              );
            })}
          </div>
        ))}
      </div>
    );
  },
});

export default HomeView;
